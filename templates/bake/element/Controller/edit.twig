{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
{% set belongsTo = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set belongsToMany = Bake.aliasExtractor(modelObj, 'belongsToMany') %}
{% set compact = ["'#{singularName}'"] %}
    /**
     * Edit method
     *
     * @param string|null $id {{ singularHumanName }} id.
     * @return \Psr\Http\Message\ResponseInterface
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
{% set IdProperty = OpenApiDocBlock.schemaProperty(propertySchema, 'id') %}
    #[OA\Put(
{% if prefix %}
        path: '/{{ OpenApiText.prefixToPath(prefix) }}/{{ OpenApiText.underscore(pluralName) }}/{id}.json',
{% else %}
        path: '/{{ pluralName }}/{id}.json',
{% endif %}
        summary: 'Edit {{ singularName }}',
        description: 'Edit {{ singularName }}',
        parameters: [
            new OA\Parameter(
                name: 'id',
                in: 'path',
                required: true,
                schema: new OA\Schema(type: '{{ IdProperty['type']|raw }}', format: '{{ IdProperty['format']|raw }}'),
                description: '{{ singularHumanName }} id',
            ),
        ],
{{ OpenApiDocBlock.openApiActionBody(propertySchema)|raw }}
        responses: [
            new OA\Response(
                response: 201,
                description: 'OK',
                content: new OA\JsonContent(ref: '#components/schemas/{{ singularHumanName }}'),
            ),
            new OA\Response(response: 401, description: 'Unauthorized'),
            new OA\Response(response: 403, description: 'Forbidden'),
            new OA\Response(
                response: 422,
                description: 'Validation Error',
                content: new OA\JsonContent(ref: '#components/schemas/Application'),
            ),
        ]
    )]
    public function edit($id = null)
    {
        if (!$this->request->is(['patch', 'put'])) {
            throw new MethodNotAllowedException();
        }

        return $this->Crud->execute();
    }
