{#
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
{% set allAssociations = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'BelongsToMany')) %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'HasOne')) %}
{% set allAssociations = allAssociations|merge(Bake.aliasExtractor(modelObj, 'HasMany')) %}
{% set singularAssociations = Bake.aliasExtractor(modelObj, 'BelongsTo') %}
{% set singularAssociations = singularAssociations|merge(Bake.aliasExtractor(modelObj, 'HasOne')) %}
{% set pluralAssociations = Bake.aliasExtractor(modelObj, 'BelongsToMany') %}
{% set pluralAssociations = pluralAssociations|merge(Bake.aliasExtractor(modelObj, 'HasMany')) %}
    /**
     * View method
     *
     * @param string|null $id {{ singularHumanName }} id.
     * @return \Psr\Http\Message\ResponseInterface
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
{% set IdProperty = OpenApiDocBlock.schemaProperty(propertySchema, 'id') %}
    #[OA\Get(
{% if prefix %}
        path: "/{{ OpenApiText.prefixToPath(prefix) }}/{{ OpenApiText.underscore(pluralName) }}/{id}.json",
{% else %}
        path: "/{{ pluralName }}.json",
{% endif %}
        summary: "Get {{ singularHumanName }}",
        description: "Get {{ singularHumanName }}",
        parameters: [
            new OA\Parameter(
                name: 'id',
                in: 'path',
                required: true,
                schema: new OA\Schema(type: '{{ IdProperty['type']|raw }}', format: '{{ IdProperty['format']|raw }}'),
                description: '{{ singularHumanName }} id',
            ),
        ],
        responses: [
{% if singularAssociations or pluralAssociations %}
            new OA\Response(
                response: 200,
                description: 'OK',
                content: new OA\JsonContent(
                    type: 'object',
                    allOf: [
                        new OA\Schema(ref: '#components/schemas/{{ singularHumanName }}'),
                        new OA\Schema(
                            properties: [
{% for table in singularAssociations %}
                                new OA\Property(
                                    property: "{{ OpenApiText.underscore(OpenApiText.singularize(table)) }}",
                                    ref: "#/components/schemas/{{ OpenApiText.singularize(table) }}",
                                    description: "{{ OpenApiText.singularize(table) }} Entity",
                                ),
{% endfor %}
{% for table in pluralAssociations %}
                                new OA\Property(
                                    property: "{{ OpenApiText.underscore(table) }}",
                                    type: "array",
                                    items: new OA\Items(ref: "#/components/schemas/{{ OpenApiText.singularize(table) }}"),
                                    description: "{{ OpenApiText.singularize(table) }} Entities",
                                ),
{% endfor %}
                            ],
                        ),
                    ],
                ),
            ),
{% else %}
            new OA\Response(
                response: 200,
                description: 'OK',
                content: new OA\JsonContent(ref: '#components/schemas/{{ singularHumanName }}'),
            ),
{% endif %}
            new OA\Response(response: 401, description: 'Unauthorized'),
            new OA\Response(response: 403, description: 'Forbidden'),
            new OA\Response(response: 404, description: 'Not Found'),
        ]
    )]
    public function view($id = null)
    {
        if (!$this->request->is('get')) {
            throw new MethodNotAllowedException();
        }
{% if allAssociations %}

        $this->Crud->on('beforeFind', function (Event $event) {
            $event->getSubject()->query->contain([{{ Bake.stringifyList(allAssociations, {'indent': false})|raw }}]);
        });
{% endif %}

        return $this->Crud->execute();
    }
